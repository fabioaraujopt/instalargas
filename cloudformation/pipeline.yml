AWSTemplateFormatVersion: '2010-09-09'

Description: 'WebSitePipeline'

Metadata:
    AWS::CloudFormation::Interface:
        ParameterGroups:
          - Label: {default: 'Github Parameters'}
            Parameters:
              - GithubToken
              - GithubUser
              - GithubRepo
              - GithubBranch

Parameters:
    ProjectName:
        Type: String
        Description: 'Project and Stack name'
        Default: teste12345
    GithubUser:
        Type: String
        Description: 'Github user where the repository lives'
        Default: 'fabioaraujopt'
    GithubRepo:
        Type: String
        Description: 'instalargas'
        Default: instalargas
    GithubBranch:
        Type: String
        Description: 'master'
        Default: master
    GithubCode:
        Type: String
        Description: 'master'
        Default: 682352d802db82b68e66abcae7d9ad4c69da7a67
  
Resources:
  BuildArtifactsBucket:
    Type: AWS::S3::Bucket
    Properties:
        BucketName: !Sub ${ProjectName}-build-artifacts
        BucketEncryption:
            ServerSideEncryptionConfiguration:
                - ServerSideEncryptionByDefault:
                      SSEAlgorithm: AES256
        PublicAccessBlockConfiguration:
            BlockPublicAcls: yes
            BlockPublicPolicy: yes
            IgnorePublicAcls: yes
            RestrictPublicBuckets: yes

  Pipeline:
      Type: AWS::CodePipeline::Pipeline
      Properties:
          RoleArn: !GetAtt CodePipelineRole.Arn
          ArtifactStore:
              Location: !Ref BuildArtifactsBucket
              Type: S3
          Stages:
            - Name: Source
              Actions:
                - Name: SourceGithub
                  ActionTypeId:
                      Category: Source
                      Owner: ThirdParty
                      Provider: GitHub
                      Version: '1'
                  Configuration:
                      Owner: !Ref GithubUser
                      Repo: !Ref GithubRepo
                      Branch: !Ref GithubBranch
                      OAuthToken: !Ref GithubCode
                  OutputArtifacts:
                    - Name: SourceCodeAsZip
                  RunOrder: 1
            - Name: DeployResources
              Actions:
                - Name: Cloudformation
                  ActionTypeId:
                      Category: Deploy
                      Owner: AWS
                      Provider: CloudFormation
                      Version: '1'
                  Configuration:
                      ActionMode: CREATE_UPDATE
                      Capabilities: CAPABILITY_AUTO_EXPAND,CAPABILITY_IAM
                      RoleArn: !GetAtt CloudFormationExecutionRole.Arn
                      StackName: !Sub '${ProjectName}-application'
                      TemplatePath: SourceCodeAsZip::template.yaml
                      ParameterOverrides: !Sub '{"ProjectName": "${ProjectName}"}'
                  InputArtifacts:
                    - Name: SourceCodeAsZip
            - Name: DeployS3-Staging
              Actions:
                - Name: DeployCodeToS3Stage
                  ActionTypeId:
                      Category: Deploy
                      Owner: AWS
                      Provider: S3
                      Version: '1'
                  InputArtifacts:
                    - Name: SourceCodeAsZip
                  Configuration:
                    BucketName: !Sub ${ProjectName}-staging-bucket
                    Extract: true
            - Name: DeployS3-Production
              Actions:
                - Name: DeployCodeToS3Stage
                  ActionTypeId:
                      Category: Deploy
                      Owner: AWS
                      Provider: S3
                      Version: '1'
                  InputArtifacts:
                    - Name: SourceCodeAsZip
                  Configuration:
                    BucketName: !Sub ${ProjectName}-prod-bucket
                    Extract: true
  PipelineWebhook:
    Type: AWS::CodePipeline::Webhook
    Properties:
      TargetPipeline: !Ref Pipeline
      TargetPipelineVersion: !GetAtt Pipeline.Version
      TargetAction: SourceGithub
      RegisterWithThirdParty: true
      Authentication: GITHUB_HMAC
      AuthenticationConfiguration:
          SecretToken: !Ref GithubCode
      Filters:
        - JsonPath: "$.ref"
          MatchEquals: refs/heads/{Branch}

  CodePipelineRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal: {Service: ['codepipeline.amazonaws.com']}
              Action: ['sts:AssumeRole']
      Path: /
      Policies:
        - PolicyName: s3_pipeline
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 's3:Get*'
                  - 's3:Put*'
                Resource: !Sub 'arn:aws:s3:::*/*'
        - PolicyName: logs
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: arn:aws:logs:*:*:*

        - PolicyName: codebuild
          PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - 'codebuild:BatchGetBuilds'
                    - 'codebuild:StartBuild'
                  Resource:
                    - !Sub '${ApplicationCodeBuildProject.Arn}'
        - PolicyName: cloudformation
          PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - 'cloudformation:DescribeStacks'
                    - 'cloudformation:CreateStack'
                    - 'cloudformation:UpdateStack'
                    - 'cloudformation:DeleteStack'
                  Resource:
                    - !Sub 'arn:${AWS::Partition}:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/${ProjectName}-application/*'
                - Effect: Allow
                  Action:
                    - 'iam:PassRole'
                  Resource:
                    - !GetAtt CloudFormationExecutionRole.Arn
        - PolicyName: cloudfront
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'cloudfront:*'
                Resource:
                  - '*'

        - PolicyName: s3-creation
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 's3:*'
                Resource:
                  - '*'
            
                 
  CloudFormationExecutionRole:
      Type: AWS::IAM::Role
      Properties:
          AssumeRolePolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Principal: {Service: ['cloudformation.amazonaws.com']}
                  Action: ['sts:AssumeRole']
          Policies:
            - PolicyName: s3
              PolicyDocument:
                Version: '2012-10-17'
                Statement:
                  - Effect: Allow
                    Action:
                      - 's3:*'
                    Resource:
                      - '*'
            - PolicyName: logs
              PolicyDocument:
                Version: '2012-10-17'
                Statement:
                  - Effect: Allow
                    Action:
                      - 'logs:CreateLogGroup'
                      - 'logs:CreateLogStream'
                      - 'logs:PutLogEvents'
                    Resource: arn:aws:logs:*:*:*
            - PolicyName: cloudformation
              PolicyDocument:
                  Statement:
                    - Effect: Allow
                      Action:
                        - 'cloudformation:CreateChangeSet'
                      Resource:
                          - !Sub 'arn:${AWS::Partition}:cloudformation:${AWS::Region}:aws:transform/Serverless-2016-10-31'
            - PolicyName: iam
              PolicyDocument:
                  Statement:
                    - Effect: Allow
                      Action:
                        - 'iam:AttachRolePolicy'
                        - 'iam:CreateRole'
                        - 'iam:UpdateRole'
                        - 'iam:DeleteRole'
                        - 'iam:DeleteRolePolicy'
                        - 'iam:DetachRolePolicy'
                        - 'iam:GetRole'
                        - 'iam:GetRolePolicy'
                        - 'iam:PassRole'
                        - 'iam:PutRolePolicy'
                      Resource:
                        - !Sub 'arn:${AWS::Partition}:iam::${AWS::AccountId}:role/*'
            - PolicyName: api-gateway
              PolicyDocument:
                  Statement:
                    - Effect: Allow
                      Action:
                        - 'apigateway:GET'
                        - 'apigateway:POST'
                        - 'apigateway:PATCH'
                        - 'apigateway:PUT'
                        - 'apigateway:DELETE'
                      Resource:
                        - !Sub 'arn:${AWS::Partition}:apigateway:${AWS::Region}::/domainnames'
                        - !Sub 'arn:${AWS::Partition}:apigateway:${AWS::Region}::/domainnames/*'
                        - !Sub 'arn:${AWS::Partition}:apigateway:${AWS::Region}::/restapis'
                        - !Sub 'arn:${AWS::Partition}:apigateway:${AWS::Region}::/restapis/*'
            - PolicyName: lambda
              PolicyDocument:
                  Statement:
                    - Effect: Allow
                      Action:
                        - 'lambda:*'
                      Resource:
                        - !Sub 'arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:function:*'
                        - !Sub 'arn:${AWS::Partition}:lambda:${AWS::Region}:${AWS::AccountId}:layer:*'
            - PolicyName: cloudfront
              PolicyDocument:
                Version: '2012-10-17'
                Statement:
                  - Effect: Allow
                    Action:
                      - 'cloudfront:*'
                    Resource:
                      - '*'

  ApplicationCodeBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
        ServiceRole: !GetAtt CodeBuildServiceRole.Arn
        Source:
            Type: CODEPIPELINE
            BuildSpec: application/buildspec.yaml
        Artifacts:
            Type: CODEPIPELINE
        Environment:
            Type: LINUX_CONTAINER
            ComputeType: BUILD_GENERAL1_SMALL
            Image: aws/codebuild/standard:2.0
            EnvironmentVariables:
              - {Name: BUILD_OUTPUT_BUCKET, Value: !Ref BuildArtifactsBucket}
              - {Name: BUILD_OUTPUT_PREFIX, Value: !Sub '${ProjectName}/application-codebuild-artifact'}

  CodeBuildServiceRole:
    Type: AWS::IAM::Role
    Properties:
        AssumeRolePolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Principal: {Service: ['codebuild.amazonaws.com']}
                Action: ['sts:AssumeRole']
        Path: /
        Policies:
          - PolicyName: logs
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - 'logs:CreateLogGroup'
                    - 'logs:CreateLogStream'
                    - 'logs:PutLogEvents'
                  Resource: arn:aws:logs:*:*:*
          - PolicyName: s3_codebuild
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - 's3:Get*'
                    - 's3:Put*'
                  Resource:
                    - !Sub 'arn:aws:s3:::*/*'
